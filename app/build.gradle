// 设置该module为应用程序, 对应的'com.android.library'为设置成类库
// 其实是Groovy语法: 调用了project对象的apply方法, 传入了一个以plugin为key的map
// 完整写法(包含下面那个) project.apply([plugin: 'com.android.application', plugin: 'realm-android'])
apply plugin: 'com.android.application'

apply plugin: 'realm-android'

// 定义时间方法(一般用于app打包命名)
def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

// signingConfigs直接配置密钥密码什么的必然不太好, 所以一般在.properties(比如local.properties)中配置
Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def todayWeather = properties.getProperty("weather.desc")

android {
    // 这边的值也可以在gradle.properties文件中定义, 比如
    compileSdkVersion APP_COMPILE_SDK_VERSION as int
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    // Manifest中的一下配置会直接被这里覆盖
    defaultConfig {
        // applicationId作用: 1.作为程序的唯一识别ID, 防止在同一手机装两个一样的程序;
        // 2.作为我们R资源类的包名. 在以前我们修改这个ID会导致所有用引用R资源类的地方都要修改。
        // 但是现在我们如果修改applicationId只会修改当前程序的ID, 而不会去修改源码中资源文件的引用
        applicationId "com.shiqkuangsan.mycustomviews"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    // 编译类型配置, 不同的编译配置对应的有不同的编译配置, 每一个Build Type(只有1个fralvor)都会生成一个APK
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 指定签名配置
            // signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                // variant.buildType.name 写在release中该值即为release
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为AndroidStudy_v1.0_flavor_201706060606.apk
//                        def fileName = "AndroidStudy_v${defaultConfig.versionName}_${variant.productFlavors[0] ? variant.productFlavors[0].name : 'flavor'}_${getDate()}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
                        // 一般调试期间不要这样, 不然每次运行都会产生一个新apk, 用同名的导致覆盖就好了
                        def fileName = "AndroidStudy_v${defaultConfig.versionName}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

//    Build Type + Product Flavor = Build Variant(构建变量版本)
    // 定义了从项目中构建的一个应用的不同自定义版本, 虽然最项目终生成了多个定制的版本, 但是它们本质上都是同一个应用
    // 下面定义了2个例子flavor. 这样对应上面的一个release版本, 就有会产生2个apk. 如果上面还定义debug type
    // 就会有2 x 2 = 4个apk. 一般用于多渠道打包
//    productFlavors {
//        flavor1 {}
//
//        flavor2 {
////            不配置默认使用defaultConfig
//            applicationId "com.shiqkuangsan.mycustomviews"
//            versionCode 233
//        }
//    }

    // 签名配置, 也可以在project structure中设置, 也可以直接打包的时候设置
//    signingConfigs {
//        release {
//            keyAlias "shiqkuangsan"
//            keyPassword "xxx"
//            storeFile file('../keystore/customview.jks')
//            storePassword 'xxx'
//        }
//    }

    // 配置本地.so库, 这样.so文件直接可以放在该module的libs下
//    sourceSets.main{
//        jniLibs.srcDir 'src/main/lib'
//    }

//
//    compile (project('xxx')){
//        exclude group: 'com.google.code.gson'
//        exclude group: 'com.squareup.okhttp3'
//    }

// 可以给单独的module指定仓库配置
    dependencies {
        // 使用files()方法或者fileTree()方法添加编译依赖, files()的话一般都是相对路径
        // compile files('libs/xxx-1.0.jar')
        // fileTree()要相对简单, 一次可以配置所有jar包, aar包. 比如include属性值是个数组['*.jar', '*.aar']
        compile fileTree(include: ['*.jar'], dir: 'libs')
        testCompile 'junit:junit:4.12'
        androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        compile rootProject.ext.dependencies.appcompatv7
        compile rootProject.ext.dependencies.supportv4
        compile rootProject.ext.dependencies.recyclerview
        compile rootProject.ext.dependencies.design
        compile rootProject.ext.dependencies.cardview
        compile rootProject.ext.dependencies.constraint

        // xUtils
        compile rootProject.ext.dependencies.xUtils
        // Glide库
        compile rootProject.ext.dependencies.glide
        compile rootProject.ext.dependencies.glidePro
        // ImageLoader
        compile rootProject.ext.dependencies.imageloader
        // 汉字转拼音
        compile 'com.github.promeg:tinypinyin:1.0.0'
        // 下拉刷新
        compile 'in.srain.cube:ultra-ptr:1.0.11'
        // 图片选择器
        compile 'cn.bingoogolapple:bga-adapter:1.1.5@aar'
        compile 'cn.bingoogolapple:bga-photopicker:1.2.3@aar'
        // 6.0简易申请权限
        compile 'pub.devrel:easypermissions:0.2.0'
        // Alibaba json工具
        compile 'com.alibaba:fastjson:1.2.17'
        // recyclerview的adapter / item / viewholder动画
        compile 'jp.wasabeef:recyclerview-animators:2.2.5'
        // 图片缩放
        compile 'com.bm.photoview:library:1.4.1'
        // facebook的弹簧动画库
        //    compile 'com.facebook.rebound:rebound:0.3.8'
        // View碎裂效果
        compile 'tyrantgit:explosionfield:1.0.1'
        //  原版PhotoView库 (其中上面依赖的bga-photopicker其实已经依赖了PhotoView库)
        //    compile 'com.github.chrisbanes:PhotoView:1.3.1'
        // 小白点指示器
        compile 'com.romandanylyk:pageindicatorview:0.0.9'
        // alibaba的vlayout库
        compile('com.alibaba.android:vlayout:1.0.5@aar') {
            transitive = true
        }
        // 超级RecyclerView库, 可实现各种效果
        compile 'com.github.jdsjlzx:LRecyclerView:1.4.3'
        // BoomMenu
        compile 'com.nightonke:boommenu:2.1.0'

        //图标
        compile 'com.joanzapata.iconify:android-iconify-ionicons:2.2.2'
        compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.2.2'

        // 沉浸式测试    StatusBarCompat.setStatusBarColor
        compile 'com.githang:status-bar-compat:0.7'

        // 依赖本地module(library)
        compile(project(':cityselector')) {
            // 示例: 配置依赖该类库时不包括这些lib(当引起冲突时)
            // exclude group: 'com.google.code.gson'
            // exclude group: 'com.squareup.okhttp3'
        }

    }

    // 依赖glide后会出jsr305版本冲突.这里强制使用更高的, 也可以在上面androidTestCompile中剔除group->'com.google.code.findbugs'
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
}
package green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.greendao.demo.entity.GreenDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DAO_BEAN".
*/
public class GreenDaoBeanDao extends AbstractDao<GreenDaoBean, Long> {

    public static final String TABLENAME = "GREEN_DAO_BEAN";

    /**
     * Properties of entity GreenDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GreenDaoId = new Property(0, Long.class, "GreenDaoId", true, "_id");
        public final static Property GreenDaoIndex = new Property(1, Integer.class, "GreenDaoIndex", false, "GREEN_DAO_INDEX");
        public final static Property GreenDaoName = new Property(2, String.class, "GreenDaoName", false, "GREEN_DAO_NAME");
    }


    public GreenDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: GreenDaoId
                "\"GREEN_DAO_INDEX\" INTEGER," + // 1: GreenDaoIndex
                "\"GREEN_DAO_NAME\" TEXT);"); // 2: GreenDaoName
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GREEN_DAO_BEAN_GREEN_DAO_INDEX ON GREEN_DAO_BEAN" +
                " (\"GREEN_DAO_INDEX\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDaoBean entity) {
        stmt.clearBindings();
 
        Long GreenDaoId = entity.getGreenDaoId();
        if (GreenDaoId != null) {
            stmt.bindLong(1, GreenDaoId);
        }
 
        Integer GreenDaoIndex = entity.getGreenDaoIndex();
        if (GreenDaoIndex != null) {
            stmt.bindLong(2, GreenDaoIndex);
        }
 
        String GreenDaoName = entity.getGreenDaoName();
        if (GreenDaoName != null) {
            stmt.bindString(3, GreenDaoName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDaoBean entity) {
        stmt.clearBindings();
 
        Long GreenDaoId = entity.getGreenDaoId();
        if (GreenDaoId != null) {
            stmt.bindLong(1, GreenDaoId);
        }
 
        Integer GreenDaoIndex = entity.getGreenDaoIndex();
        if (GreenDaoIndex != null) {
            stmt.bindLong(2, GreenDaoIndex);
        }
 
        String GreenDaoName = entity.getGreenDaoName();
        if (GreenDaoName != null) {
            stmt.bindString(3, GreenDaoName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GreenDaoBean readEntity(Cursor cursor, int offset) {
        GreenDaoBean entity = new GreenDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // GreenDaoId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // GreenDaoIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // GreenDaoName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDaoBean entity, int offset) {
        entity.setGreenDaoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGreenDaoIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGreenDaoName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GreenDaoBean entity, long rowId) {
        entity.setGreenDaoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GreenDaoBean entity) {
        if(entity != null) {
            return entity.getGreenDaoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenDaoBean entity) {
        return entity.getGreenDaoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
